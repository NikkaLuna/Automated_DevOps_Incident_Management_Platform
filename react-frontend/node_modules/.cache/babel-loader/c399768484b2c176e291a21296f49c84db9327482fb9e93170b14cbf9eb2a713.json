{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiram\\\\ticket-react-app\\\\src\\\\components\\\\IncidentLogs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IncidentLogs({\n  incidentId\n}) {\n  _s();\n  const [logs, setLogs] = useState([]);\n  useEffect(() => {\n    const fetchLogs = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/api/logs/?incident=${incidentId}`);\n        const data = await response.json();\n        setLogs(data);\n      } catch (error) {\n        console.error('Error fetching logs:', error);\n      }\n    };\n    fetchLogs();\n  }, [incidentId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Incident Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: logs.map(log => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [log.action, \" at \", new Date(log.timestamp).toLocaleString()]\n      }, log.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(IncidentLogs, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = IncidentLogs;\nexport default IncidentLogs;\nvar _c;\n$RefreshReg$(_c, \"IncidentLogs\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","IncidentLogs","incidentId","_s","logs","setLogs","fetchLogs","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","log","action","Date","timestamp","toLocaleString","id","_c","$RefreshReg$"],"sources":["C:/Users/kiram/ticket-react-app/src/components/IncidentLogs.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction IncidentLogs({ incidentId }) {\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/api/logs/?incident=${incidentId}`);\r\n        const data = await response.json();\r\n        setLogs(data);\r\n      } catch (error) {\r\n        console.error('Error fetching logs:', error);\r\n      }\r\n    };\r\n\r\n    fetchLogs();\r\n  }, [incidentId]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Incident Logs</h3>\r\n      <ul>\r\n        {logs.map(log => (\r\n          <li key={log.id}>\r\n            {log.action} at {new Date(log.timestamp).toLocaleString()}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IncidentLogs;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4CN,UAAU,EAAE,CAAC;QACtF,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,OAAO,CAACI,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAEhB,oBACEF,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBjB,OAAA;MAAAa,QAAA,EACGT,IAAI,CAACc,GAAG,CAACC,GAAG,iBACXnB,OAAA;QAAAa,QAAA,GACGM,GAAG,CAACC,MAAM,EAAC,MAAI,EAAC,IAAIC,IAAI,CAACF,GAAG,CAACG,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;MAAA,GADlDJ,GAAG,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACd,EAAA,CA7BQF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA+BrB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}